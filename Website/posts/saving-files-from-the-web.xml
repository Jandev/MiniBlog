<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>Saving files from the web</title>
  <slug>saving-files-from-the-web</slug>
  <author>Jan</author>
  <pubDate>2011-04-10 12:42:25</pubDate>
  <lastModified>2014-04-25 12:06:07</lastModified>
  <content>&lt;p&gt;A few weeks ago I had to create an application which would download files from several SharePoint libraries. I had just done a similar thing for a Windows Phone 7 application, so I could reuse most of the code.&lt;/p&gt; &lt;p&gt;After running the application I received an awkward exception message which said: “This stream does not support seek operations”. This exception was triggered by the following code snippet:&lt;/p&gt;&lt;pre class="brush: csharp"&gt;HttpWebRequest request = (HttpWebRequest)WebRequest.Create(filelocationUrl);
HttpWebResponse response = (HttpWebResponse) request.GetResponse();
var stream = response.GetResponseStream();
&lt;/pre&gt;
&lt;p&gt;I though this probably had something to do with it being a stream from a web so it can’t really check the size of a file. Lucky for me I wasn’t the first developer who had stumbled upon this issue. &lt;a href="http://codemaverick.blogspot.com/2007/01/stream-does-not-support-seek-operations.html"&gt;This blog post&lt;/a&gt; describes the same issue.&lt;/p&gt;
&lt;p&gt;The code I was supposed to use is this:&lt;/p&gt;&lt;pre class="brush: csharp"&gt;Stream respStream = myResponse.GetResponseStream();
 
MemoryStream memStream = new MemoryStream();
byte[] buffer = new byte[2048];
 
int bytesRead = 0;
do
{
	bytesRead = respStream.Read(buffer, 0, buffer.Length);
	memStream.Write(buffer, 0, bytesRead);
} while (bytesRead != 0);
respStream.Close();
buffer = memStream.ToArray();
string html = System.Text.Encoding.ASCII.GetString(buffer);
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Using this I’m specifying the size of the chunks which need to be downloaded. This code is something I had used in the past also, but after I saw how easy it was in an asynchronous environment (WP7 / Silverlight) I had hoped it would work in ASP.NET / SharePoint also.&lt;/p&gt;</content>
  <ispublished>true</ispublished>
  <categories></categories>
  <comments></comments>
</post>
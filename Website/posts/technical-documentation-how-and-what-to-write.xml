<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>Technical documentation: how and what to write</title>
  <slug>technical-documentation-how-and-what-to-write</slug>
  <author>Jan</author>
  <pubDate>2011-05-13 10:30:00</pubDate>
  <lastModified>2014-04-25 12:06:07</lastModified>
  <content>&lt;p&gt;In the past couple of years I&amp;rsquo;ve written quite a lot of documentation, be it functional, technical, help files for end-users, flyers, proposals and much more. Most developers I know try to avoid writing these kind of things as much as they can, but let&amp;rsquo;s face it, it is part of our job.&lt;/p&gt;
&lt;p&gt;At the moment I&amp;rsquo;m working in a team with pretty smart and experienced developers, but as it goes, one of our team members has been placed on an other team at a different customer and I was asked to replace him. The leaving developer had created an awesome framework, the code looks good, unit test coverage was (and still is) near 100% and it&amp;rsquo;s quite understandable if you step through the code. The only thing missing was technical and functional documentation. He and I tried to write some of documentation on the framework, but what do you need write in such documents?&lt;/p&gt;
&lt;p&gt;Then it struck me, we developers are always trying to improve our coding and design skills and trying out new things and new languages, but we hardly try to improve ourselves in writing documentation.&lt;br /&gt;I&amp;rsquo;ve never had a class at school on how to write functional or technical documents. Also, I&amp;rsquo;ve never seen any specifications at a company on how such documents should look like or what you should describe. Most of the time you have to figure it out yourself, think of some stuff you would like to see in it yourself and create some UML-diagrams to keep managers happy (a lot of developers don&amp;rsquo;t understand UML, so they skip it). &lt;br /&gt;Another thing is where do you save these documents. Do you want them in a project repository (TFS), on a file share, in a CMS, etc.? In the past, most documents I&amp;rsquo;ve written were saved on some file share with a version number in the filename. A bit old-fashioned, but it works (for 1 editor at a time). At the current customer we&amp;rsquo;ve created a Wiki site in SharePoint in which we describe all the functional and technical specs. This is a bit better as to saving a Word document on a file share as everyone can change the contents and it&amp;rsquo;s available through the web. Also, it&amp;rsquo;s easier to maintain and SharePoint has it&amp;rsquo;s own versioning system for checking the changes.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d recommend doing writing Wiki&amp;rsquo;s (or some other CMS solution) over writing Word documents as it&amp;rsquo;s easier to maintain and more user friendly (in my opinion).&lt;br /&gt;This still leaves the question on what you need to write in the documentation.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not very useful to describe in detail on what the code fragments do. The code will probably be refactored and updating the documentation will be forgotten. Also, if the code is clear enough, the developer can see for himself what a specific code block does. Something which can (and should) be described is why a certain solution is chosen. If something can&amp;rsquo;t be made clear through code, it should probably be described in some documentation. Like, why are we using SOAP messages, can&amp;rsquo;t we handle JSON?&lt;br /&gt;Most of the time you can&amp;rsquo;t figure out why such design decisions were made during development. One of the things which I also found quite useful was the fluent configuration diagram. It described how the fluent configuration was implemented. If you are a newcomer to a project, you probably won&amp;rsquo;t know what a certain implementation will do and when to use it.&lt;br /&gt;Also describing some best practices can be useful for other developers. Hardware and software specifications are necessary most of the time and it&amp;rsquo;s probably a good idea to describe the main purpose of the different classes/interfaces.&lt;/p&gt;
&lt;p&gt;In short, I think it's good to do the following when writing documentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Save it online (wiki, CMS)&lt;/li&gt;
&lt;li&gt;Make sure there's (automatic) version control&lt;/li&gt;
&lt;li&gt;Describe design decisions&lt;/li&gt;
&lt;li&gt;Describe why you implemented something in the way you did&lt;/li&gt;
&lt;li&gt;Only document stuff you think is necessary for the reading audience&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I do hope to come across some books or whitepapers which describe what I should be writing in these kind of technical (and functional) documents as I haven&amp;rsquo;t seen one yet. There are some guidelines, but most of them are bloated and have several chapters which you don&amp;rsquo;t want to read because they aren&amp;rsquo;t interesting for most people.&lt;/p&gt;
&lt;p&gt;Now, off writing some documents again&amp;hellip;..&lt;/p&gt;</content>
  <ispublished>true</ispublished>
  <categories></categories>
  <comments></comments>
</post>
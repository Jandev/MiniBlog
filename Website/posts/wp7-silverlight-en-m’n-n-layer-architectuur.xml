<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>WP7, Silverlight en m’n n-layer architectuur</title>
  <slug>wp7-silverlight-en-m’n-n-layer-architectuur</slug>
  <author>Jan</author>
  <pubDate>2010-12-16 22:25:00</pubDate>
  <lastModified>2014-04-25 12:06:08</lastModified>
  <content>&lt;div class="ExternalClass61EA47D204D44FF4BF68BE977A0B64A6"&gt;
&lt;p&gt;Zoals in m'n vorige post is te lezen ben ik momenteel bezig met het maken van een nieuwe Windows Phone 7 applicatie met het MVVM pattern. Op zich niet zo heel spannend, aangezien er duizenden anderen zijn die dit ook doen.&lt;/p&gt;
&lt;p&gt;Enkele jaren geleden heb ik geleerd om m'n applicatie in meerdere logische lagen of tiers op te delen, presentatie-, business- en data-laag. Ik ben nog steeds een groot voorstanden van dit principe en of je hier nu &lt;a href="http://davidhayden.com/blog/dave/archive/2005/07/22/2401.aspx"&gt;lagen of tiers&lt;/a&gt; gebruikt, beide keren moet er data van 1 klasse naar een andere worden gestuurd.&lt;/p&gt;
&lt;p&gt;Dit wil ik nu dus ook toepassen binnen m'n Windows Phone 7 applicatie. Eerst heb ik nu een nieuw MVVM Light project gemaakt met daarin de benodigde onderdelen voor m'n applicatie. Daarna heb ik gelijk een business en een data laag er bij gemaakt. Tegenwoordig heb je ook de keuze om een Windows Phone Class Library te maken:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://weblogjanv/Lists/Photos/121610_2127_WP7Silverli1.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Hier heb ik dan ook voor gekozen, omdat deze er standaard voor zorgt dat ik niet alle assemblies van .NET 3.5 kan kiezen en dus een dll maak die geschikt is voor een WP7 apparaat. Het resultaat is ongeveer als volgt:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://weblogjanv/Lists/Photos/121610_2127_WP7Silverli2.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Aangezien ik jarenlang aan webdevelopment heb gedaan in ASP.NET en Sharepoint 2007/2010 ben ik niet meer zo in de loop van asynchroon werken en het gebruik van meerdere threads binnen je code. Met Silverlight ontkom je hier niet aan, dus heb ik m'n kennis aardig moeten bijspijkeren. Vandaag heb ik ongeveer de gehele dag besteedt om communicatie tussen m'n lagen aan de praat te krijgen. Na veel voorbeelden te hebben gelezen, ge&amp;iuml;mplementeerd en verwijderd te hebben, heb ik nu toch iets werkends kunnen maken. Of het helemaal goed is, dat is een tweede. Waarschijnlijk kijk ik over een jaar hier heel anders tegen aan, maar momenteel ben ik er tevreden mee.&lt;/p&gt;
&lt;p&gt;Het voordeel van werken met meerdere threads is dat je UI niet vast loopt tijdens het uitvoeren van een actie. Ook kan alleen de UI-thread de UI bijwerken, wat het geheel iets 'veiliger' maakt. Nu was het de bedoeling dat ik aan de hand van de coordinaten van de telefoon (interne GPS) de plaats ging bepalen. Hier kan natuurlijk &lt;a href="http://msdn.microsoft.com/en-us/library/cc966793.aspx"&gt;Bing&lt;/a&gt; of &lt;a href="http://code.google.com/intl/nl-NL/apis/maps/documentation/geocoding/"&gt;Google&lt;/a&gt; voor worden gebruikt. Aangezien je bij Bing een key moet aanvragen, heb ik nu eerst voor Google gekozen.&lt;/p&gt;
&lt;p&gt;Wat ik wilde doen is de coordinaten van het apparaat doorsturen naar de business laag, hier wordt deze dan worden vertaald naar 2 double's die in de data laag kan worden gebruikt en dan de Google services er mee kan aanroepen. Heel eenvoudig en in een website zou ik dit ook in enkele minuten hebben gemaakt. In Silverlight moest ik me echter gaan houden aan het asynchrone model. Gelukkig kan er tegenwoordig gebruik worden gemaakt van lambda expressies en Action&amp;lt;T&amp;gt; en Func&amp;lt;T&amp;gt;, welke ik nu echt nodig had.&lt;/p&gt;
&lt;p&gt;Ten eerste de data laag. Hier plaats ik 2 double's in de code en moet er voor zorgen dat de respons van het http request wordt teruggestuurd. Dit wilde ik doen met het HttpWebRequest. Binnen Silverlight is er nu alleen nog maar de BeginGetResponse methode beschikbaar. Dit was al de eerste aanpassing die ik moest maken in m'n gedachtengang. Na wat zoeken hoe lambda expressies werken (vergeet ik altijd door gebrek aan gebruik) is hier een redelijk goed werkende oplossing voor gemaakt.&lt;/p&gt;
&lt;p&gt;Let wel, hier moet nog wel wat validatie en dergelijke op plaatsvinden, maar voor nu werkt het eerst prima.&lt;/p&gt;
&lt;div&gt;
&lt;table style="border-collapse: collapse; background: white;" border="0"&gt;
&lt;colgroup span="1"&gt;&lt;col style="width: 638px;" span="1"&gt;&lt;/col&gt;&lt;/colgroup&gt; 
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="padding-left: 7px; padding-right: 7px; border: 0.5pt solid;"&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style="font-family: Consolas;"&gt;&lt;span style="color: blue;"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style="color: blue;"&gt;void&lt;/span&gt;&amp;nbsp;GetNearestTown(&lt;span style="color: #2b91af;"&gt;Action&lt;/span&gt;&amp;lt;&lt;span style="color: #2b91af;"&gt;GoogleGeoCodeResponse&lt;/span&gt;&amp;gt;&amp;nbsp;callback)&lt;br /&gt;{&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color: blue;"&gt;var&lt;/span&gt;&amp;nbsp;address&amp;nbsp;=&amp;nbsp;&lt;span style="color: blue;"&gt;string&lt;/span&gt;.Format(&lt;span style="color: #a31515;"&gt;"http://url{0}{1}"&lt;/span&gt;,&amp;nbsp;&lt;span style="color: blue;"&gt;this&lt;/span&gt;.Latitude,&amp;nbsp;&lt;span style="color: blue;"&gt;this&lt;/span&gt;.Longitude);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color: #2b91af;"&gt;HttpWebRequest&lt;/span&gt;&amp;nbsp;webRequest&amp;nbsp;=&amp;nbsp;GetWebRequest(address);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;webRequest.BeginGetResponse(result&amp;nbsp;=&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color: blue;"&gt;var&lt;/span&gt;&amp;nbsp;response&amp;nbsp;=&amp;nbsp;webRequest.EndGetResponse(result);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color: blue;"&gt;string&lt;/span&gt;&amp;nbsp;resultstring&amp;nbsp;=&amp;nbsp;&lt;span style="color: blue;"&gt;null&lt;/span&gt;;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color: #2b91af;"&gt;Stream&lt;/span&gt;&amp;nbsp;responseStream&amp;nbsp;=&amp;nbsp;response.GetResponseStream();&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color: #2b91af;"&gt;StreamReader&lt;/span&gt;&amp;nbsp;sr&amp;nbsp;=&amp;nbsp;&lt;span style="color: blue;"&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style="color: #2b91af;"&gt;StreamReader&lt;/span&gt;(responseStream);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;resultstring&amp;nbsp;=&amp;nbsp;sr.ReadToEnd();&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color: #2b91af;"&gt;GoogleGeoCodeResponse&lt;/span&gt;&amp;nbsp;jObject&amp;nbsp;=&amp;nbsp;&lt;span style="color: #2b91af;"&gt;JSON&lt;/span&gt;.Deserialize&amp;lt;&lt;span style="color: #2b91af;"&gt;GoogleGeoCodeResponse&lt;/span&gt;&amp;gt;(resultstring);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;callback(jObject);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;},&amp;nbsp;&lt;span style="color: blue;"&gt;null&lt;/span&gt;);&lt;br /&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Het ophalen en lezen van de respons en objecten doe ik nu dus via een lambda expressie binnen de BeginGetResponse. Hier moest ik zelf wel even aan wennen, maar na verloop van tijd wordt het steeds duidelijker. Uiteindelijk plaats ik alle resultaten, via een helper methode, in een zelfgemaakt type. De resultset geef ik hier mee aan een callback, welke als parameter wordt meegegeven. Dit is de eerste keer dat ik nuttig gebruik heb gemaakt van de Action&amp;lt;T&amp;gt;. Ik wist dat het bestond, maar nog nooit het nut er van in gezien, tot nu dus. De callback functie staat namelijk beschreven in de business laag, waar de callback dus ook wordt verwerkt.&lt;/p&gt;
&lt;p&gt;Het business object ziet er namelijk ongeveer als volgt uit:&lt;/p&gt;
&lt;div&gt;
&lt;table style="border-collapse: collapse; background: white;" border="0"&gt;
&lt;colgroup span="1"&gt;&lt;col style="width: 638px;" span="1"&gt;&lt;/col&gt;&lt;/colgroup&gt; 
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="padding-left: 7px; padding-right: 7px; border: 0.5pt solid;"&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style="font-family: Consolas;"&gt;&lt;span style="color: blue;"&gt;protected&lt;/span&gt;&amp;nbsp;&lt;span style="color: blue;"&gt;string&lt;/span&gt;&amp;nbsp;Town&amp;nbsp;{&amp;nbsp;&lt;span style="color: blue;"&gt;get&lt;/span&gt;;&amp;nbsp;&lt;span style="color: blue;"&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style="color: blue;"&gt;set&lt;/span&gt;;&amp;nbsp;}&lt;br /&gt;&lt;span style="color: blue;"&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style="color: #2b91af;"&gt;Action&lt;/span&gt;&amp;lt;&lt;span style="color: blue;"&gt;string&lt;/span&gt;&amp;gt;&amp;nbsp;responseCallback;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style="font-family: Consolas;"&gt;&lt;span style="color: blue;"&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style="color: blue;"&gt;string&lt;/span&gt;&amp;nbsp;GetCurrentCity(&lt;span style="color: #2b91af;"&gt;GeoPosition&lt;/span&gt;&amp;lt;&lt;span style="color: #2b91af;"&gt;GeoCoordinate&lt;/span&gt;&amp;gt;&amp;nbsp;position,&amp;nbsp;&lt;span style="color: #2b91af;"&gt;Action&lt;/span&gt;&amp;lt;&lt;span style="color: blue;"&gt;string&lt;/span&gt;&amp;gt;&amp;nbsp;respCallback)&lt;br /&gt;{&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color: blue;"&gt;this&lt;/span&gt;.responseCallback&amp;nbsp;=&amp;nbsp;respCallback;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color: blue;"&gt;var&lt;/span&gt;&amp;nbsp;gCode&amp;nbsp;=&amp;nbsp;&lt;span style="color: blue;"&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style="color: #2b91af;"&gt;Geocode&lt;/span&gt;(position.Location.Latitude,&amp;nbsp;position.Location.Longitude);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;gCode.GetNearestTown(resultString&amp;nbsp;=&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GetTownFromResponse(resultString);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color: blue;"&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style="color: blue;"&gt;this&lt;/span&gt;.Town;&lt;br /&gt;}&lt;br /&gt;&lt;span style="color: blue;"&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style="color: blue;"&gt;void&lt;/span&gt;&amp;nbsp;GetTownFromResponse(&lt;span style="color: #2b91af;"&gt;GoogleGeoCodeResponse&lt;/span&gt;&amp;nbsp;town)&lt;br /&gt;{&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color: blue;"&gt;if&lt;/span&gt;&amp;nbsp;(town.status&amp;nbsp;==&amp;nbsp;"OK")&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color: blue;"&gt;this&lt;/span&gt;.Town&amp;nbsp;=&amp;nbsp;town.results[0].formatted_address;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;responseCallback(&lt;span style="color: blue;"&gt;this&lt;/span&gt;.Town);&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br /&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;In de aanroep van de data access (gCode.GetNearestTown) geef ik nu de methode GetTownFromResponse methode mee, welke voldoet aan het Action&amp;lt;string&amp;gt; patroon. Hierdoor zal de callback in deze functie worden uitgevoerd. Zoals is te zien zal deze functie een property in de klasse vullen met de verkregen waarde uit de data laag. &lt;br /&gt;Het vullen van de property is momenteel niet meer direct noodzakelijk, omdat de GetTownFromResponse ook weer een callback functie aanroept welke is meegegeven in de presentatie laag van de code. Immers, in de GetCurrentCity wordt ook weer een Action&amp;lt;string&amp;gt; meegegeven welke een implementatie van een functie bevat welke in de presentatie laag is gedefinieerd.&lt;/p&gt;
&lt;p&gt;Het stuk code in de presentatie laag ziet er ongeveer als volgt uit:&lt;/p&gt;
&lt;div&gt;
&lt;table style="border-collapse: collapse; background: white;" border="0"&gt;
&lt;colgroup span="1"&gt;&lt;col style="width: 633px;" span="1"&gt;&lt;/col&gt;&lt;/colgroup&gt; 
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="padding-left: 7px; padding-right: 7px; border: 0.5pt solid;"&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style="font-family: Consolas;"&gt;&lt;span style="color: blue;"&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style="color: blue;"&gt;void&lt;/span&gt;&amp;nbsp;LocationHasChanged(&lt;span style="color: #2b91af;"&gt;GeoPosition&lt;/span&gt;&amp;lt;&lt;span style="color: #2b91af;"&gt;GeoCoordinate&lt;/span&gt;&amp;gt;&amp;nbsp;position)&lt;br /&gt;{&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color: #2b91af;"&gt;Location&lt;/span&gt;&amp;nbsp;lb&amp;nbsp;=&amp;nbsp;&lt;span style="color: blue;"&gt;new&lt;/span&gt;&amp;nbsp;Business.&lt;span style="color: #2b91af;"&gt;Location&lt;/span&gt;();&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lb.GetCurrentCity(position,&amp;nbsp;UpdateCurrentCity);&lt;br /&gt;}&lt;br /&gt;&lt;span style="color: blue;"&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style="color: blue;"&gt;void&lt;/span&gt;&amp;nbsp;UpdateCurrentCity(&lt;span style="color: blue;"&gt;string&lt;/span&gt;&amp;nbsp;newCity)&lt;br /&gt;{&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style="color: #2b91af;"&gt;Deployment&lt;/span&gt;.Current.Dispatcher.BeginInvoke(()&amp;nbsp;=&amp;gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CurrentCity&amp;nbsp;=&amp;nbsp;newCity;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br /&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Zoals is te zien wordt de UpdateCurrentCity meegegeven aan de business methode, waardoor deze dus als callback fungeert.&lt;/p&gt;
&lt;p&gt;Het stuk &lt;span style="font-family: Consolas;"&gt;&lt;span style="background-color: white; color: #2b91af;"&gt;Deployment&lt;/span&gt;&lt;span style="background-color: white;"&gt;.Current.Dispatcher.BeginInvoke&lt;/span&gt;&lt;/span&gt; zorgt er voor dat het updaten van de property CurrentCity in de UI-thread gebeurd, zodat dit ook daadwerkelijk wordt uitgevoerd. Wanneer je dit niet goed doet zal er een exception worden ge-raised met als melding "invalid cross-thread access&amp;hellip;."&lt;/p&gt;
&lt;p&gt;Al met al heb ik weer heel wat geleerd over Silverlight (en .NET) development. De code moet nog wel worden gerefactored, maar het gaat om het idee.&lt;/p&gt;
&lt;/div&gt;</content>
  <ispublished>true</ispublished>
  <categories></categories>
  <comments></comments>
</post>
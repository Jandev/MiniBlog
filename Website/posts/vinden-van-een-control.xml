<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>Vinden van een control</title>
  <slug>vinden-van-een-control</slug>
  <author>Jan</author>
  <pubDate>2007-09-08 16:46:00</pubDate>
  <lastModified>2014-04-25 12:06:08</lastModified>
  <content>&lt;div class="ExternalClassB33701DF97C1433CAB7C91E843B17198"&gt;Vandaag kwam ik tijdens de ontwikkeling van een web-applicatie iets vervelends tegen.&lt;br /&gt;Momenteel ben ik bezig met een ASP.Net 2.0 applicatie en daar wordt gebruik gemaakt van een basis uit ASP.Net 1.1. Op zich geen probleem en alles werkt ook goed, echter hebben we enkele nieuwe features toegevoegd die mogelijk werden gemaakt in 2.0 van het .Net Framework. Een van die dingen zijn Masterpages.&lt;br /&gt;Een enorm handige feature en het werkt ook wel leuk. Hoewel ik me er niet enorm in heb verdiept snap ik de basis wel en zie ook wel dat het handig (kan) zijn.&lt;br /&gt;&lt;br /&gt;Met de introductie van Masterpages introduceer je ook weer nieuwe problemen in je al bestaande web-applicatie.&lt;br /&gt;Een van die problemen die ik vandaag ben tegengekomen is het gebruik van de functie &lt;em&gt;FindControl&lt;/em&gt;. Deze kun je normaliter gebruiken om een control in je pagina op te zoeken aan de hand van een ID. Dit is nog steeds het geval, echter worden de ID's van je controls aangepast zodra ze in een masterpage staan. Je kunt dus niet meer zoeken op bijvoorbeeld het ID &lt;em&gt;testLabel&lt;/em&gt;. Nee, hier staat nu een hele prefix voor.&lt;br /&gt;Na even te hebben gezocht op internet kwam ik al snel op een oplossing voor dit probleem. Door middel van een recursieve functie te gebruiken kun je alle controls doorlopen en dan toch naar je 'eigen' ID zoeken.&lt;br /&gt;Zo ziet de functie er uit:&lt;br /&gt;
&lt;div class="code"&gt;&lt;br /&gt;public static Control FindControlRecursive(Control Root, string Id)&lt;br /&gt;{&lt;br /&gt;if (Root.ID == Id)&lt;br /&gt;return Root;&lt;br /&gt;foreach (Control Ctl in Root.Controls)&lt;br /&gt;{&lt;br /&gt;Control FoundCtl = FindControlRecursive(Ctl, Id);&lt;br /&gt;if (FoundCtl != null)&lt;br /&gt;return FoundCtl;&lt;br /&gt;}&lt;br /&gt;return null;&lt;br /&gt;}&lt;/div&gt;
&lt;br /&gt;Uiteraard zijn er talloze variaties mogelijk, maar dit is er dus een van.&lt;br /&gt;Bron: http://www.petermeadit.net/content/index.php?option=com_content&amp;amp;task=view&amp;amp;id=45&amp;amp;Itemid=55&lt;br /&gt;&lt;br /&gt;Nadeel is wel dat een recursieve functie relatief lang kan duren om uit te voeren. Het zal niet vaak voorkomen dat je een pagina hebt met honderden controls die verschillende lagen diep zitten, maar toch.&lt;br /&gt;&lt;br /&gt;Een andere oplossing die ik tegen was gekomen is om al je controls in een &lt;em&gt;panel&lt;/em&gt; te zetten.&lt;br /&gt;Op deze manier kun je weer gewoon gebruik maken van je FindControl functie en hoef je dus geen moeilijke recursieve functie te implementeren.&lt;br /&gt;Deze oplossing heb ik nu dus ook gebruikt in m'n web-applicatie.&lt;br /&gt;Alles in een panel zetten en daar de controls in zoeken.&lt;br /&gt;
&lt;div class="code"&gt;&lt;br /&gt;testPanel.FindControl("testControl");&lt;/div&gt;
&lt;br /&gt;Werkt dus uitermate goed. Hoewel het soms niet wenselijk is om alles in een grote panel te plaatsen, is het voor mij nu toch wel handig.&lt;/div&gt;</content>
  <ispublished>true</ispublished>
  <categories></categories>
  <comments></comments>
</post>